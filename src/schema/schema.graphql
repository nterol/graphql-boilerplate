# import UserOrderByInput, GraphOrderByInput, SummitOrderByInput, EdgeOrderByInput from '../generated/prisma.graphql'
# import User, QueryUser, AuthPayload, CreateUserInput, LoginUserInput, UpdateUserInput from './user.graphql'
# import Graph, CreateGraphInput, UpdateGraphInput from './graph.graphql'
# import Summit, CreateSummitInput, UpdateSummitInput from './summit.graphql'
# import Edge, CreateEdgeInput, UpdateEdgeInput from './edge.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  me: User!

  graphs(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: GraphOrderByInput
  ): [Graph!]!

  summits(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: SummitOrderByInput
  ): [Summit!]!

  summit(id: ID!): Summit!

  edges(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: EdgeOrderByInput
  ): [Edge!]!

  edge(id: ID!): Edge!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!

  createGraph(data: CreateGraphInput!): Graph!
  updateGraph(id: ID!, data: UpdateGraphInput!): Graph!
  deleteGraph(id: ID!): Graph!

  createSummit(data: CreateSummitInput!): Summit!
  updateSummit(id: ID!, data: UpdateSummitInput!): Summit!
  deleteSummit(id: ID!): Summit!

  createEdge(data: CreateEdgeInput): Edge!
  updateEdge(id: ID!, data: UpdateEdgeInput): Edge!
  deleteEdge(id: ID!): Edge!
}

# type Subscription {

# }

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
