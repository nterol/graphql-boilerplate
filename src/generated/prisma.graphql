# source: http://localhost:4466
# timestamp: Thu Jun 27 2019 12:50:07 GMT+0200 (CEST)

type AggregateEdge {
  count: Int!
}

type AggregateGraph {
  count: Int!
}

type AggregateSummit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Edge implements Node {
  id: ID!
  author: User!
  graph: Graph!
  source: Summit!
  target: Summit!
  title: String!
  body: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type EdgeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EdgeEdge]!
  aggregate: AggregateEdge!
}

input EdgeCreateInput {
  id: ID
  title: String!
  body: String
  author: UserCreateOneWithoutEdgesInput!
  graph: GraphCreateOneWithoutEdgesInput!
  source: SummitCreateOneWithoutEdgesInput!
  target: SummitCreateOneInput!
}

input EdgeCreateManyWithoutAuthorInput {
  create: [EdgeCreateWithoutAuthorInput!]
  connect: [EdgeWhereUniqueInput!]
}

input EdgeCreateManyWithoutGraphInput {
  create: [EdgeCreateWithoutGraphInput!]
  connect: [EdgeWhereUniqueInput!]
}

input EdgeCreateManyWithoutSourceInput {
  create: [EdgeCreateWithoutSourceInput!]
  connect: [EdgeWhereUniqueInput!]
}

input EdgeCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String
  graph: GraphCreateOneWithoutEdgesInput!
  source: SummitCreateOneWithoutEdgesInput!
  target: SummitCreateOneInput!
}

input EdgeCreateWithoutGraphInput {
  id: ID
  title: String!
  body: String
  author: UserCreateOneWithoutEdgesInput!
  source: SummitCreateOneWithoutEdgesInput!
  target: SummitCreateOneInput!
}

input EdgeCreateWithoutSourceInput {
  id: ID
  title: String!
  body: String
  author: UserCreateOneWithoutEdgesInput!
  graph: GraphCreateOneWithoutEdgesInput!
  target: SummitCreateOneInput!
}

"""An edge in a connection."""
type EdgeEdge {
  """The item at the end of the edge."""
  node: Edge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EdgeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EdgePreviousValues {
  id: ID!
  title: String!
  body: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input EdgeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EdgeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EdgeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EdgeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type EdgeSubscriptionPayload {
  mutation: MutationType!
  node: Edge
  updatedFields: [String!]
  previousValues: EdgePreviousValues
}

input EdgeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EdgeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EdgeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EdgeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EdgeWhereInput
}

input EdgeUpdateInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutEdgesInput
  graph: GraphUpdateOneRequiredWithoutEdgesInput
  source: SummitUpdateOneRequiredWithoutEdgesInput
  target: SummitUpdateOneRequiredInput
}

input EdgeUpdateManyDataInput {
  title: String
  body: String
}

input EdgeUpdateManyMutationInput {
  title: String
  body: String
}

input EdgeUpdateManyWithoutAuthorInput {
  create: [EdgeCreateWithoutAuthorInput!]
  connect: [EdgeWhereUniqueInput!]
  set: [EdgeWhereUniqueInput!]
  disconnect: [EdgeWhereUniqueInput!]
  delete: [EdgeWhereUniqueInput!]
  update: [EdgeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [EdgeUpdateManyWithWhereNestedInput!]
  deleteMany: [EdgeScalarWhereInput!]
  upsert: [EdgeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input EdgeUpdateManyWithoutGraphInput {
  create: [EdgeCreateWithoutGraphInput!]
  connect: [EdgeWhereUniqueInput!]
  set: [EdgeWhereUniqueInput!]
  disconnect: [EdgeWhereUniqueInput!]
  delete: [EdgeWhereUniqueInput!]
  update: [EdgeUpdateWithWhereUniqueWithoutGraphInput!]
  updateMany: [EdgeUpdateManyWithWhereNestedInput!]
  deleteMany: [EdgeScalarWhereInput!]
  upsert: [EdgeUpsertWithWhereUniqueWithoutGraphInput!]
}

input EdgeUpdateManyWithoutSourceInput {
  create: [EdgeCreateWithoutSourceInput!]
  connect: [EdgeWhereUniqueInput!]
  set: [EdgeWhereUniqueInput!]
  disconnect: [EdgeWhereUniqueInput!]
  delete: [EdgeWhereUniqueInput!]
  update: [EdgeUpdateWithWhereUniqueWithoutSourceInput!]
  updateMany: [EdgeUpdateManyWithWhereNestedInput!]
  deleteMany: [EdgeScalarWhereInput!]
  upsert: [EdgeUpsertWithWhereUniqueWithoutSourceInput!]
}

input EdgeUpdateManyWithWhereNestedInput {
  where: EdgeScalarWhereInput!
  data: EdgeUpdateManyDataInput!
}

input EdgeUpdateWithoutAuthorDataInput {
  title: String
  body: String
  graph: GraphUpdateOneRequiredWithoutEdgesInput
  source: SummitUpdateOneRequiredWithoutEdgesInput
  target: SummitUpdateOneRequiredInput
}

input EdgeUpdateWithoutGraphDataInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutEdgesInput
  source: SummitUpdateOneRequiredWithoutEdgesInput
  target: SummitUpdateOneRequiredInput
}

input EdgeUpdateWithoutSourceDataInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutEdgesInput
  graph: GraphUpdateOneRequiredWithoutEdgesInput
  target: SummitUpdateOneRequiredInput
}

input EdgeUpdateWithWhereUniqueWithoutAuthorInput {
  where: EdgeWhereUniqueInput!
  data: EdgeUpdateWithoutAuthorDataInput!
}

input EdgeUpdateWithWhereUniqueWithoutGraphInput {
  where: EdgeWhereUniqueInput!
  data: EdgeUpdateWithoutGraphDataInput!
}

input EdgeUpdateWithWhereUniqueWithoutSourceInput {
  where: EdgeWhereUniqueInput!
  data: EdgeUpdateWithoutSourceDataInput!
}

input EdgeUpsertWithWhereUniqueWithoutAuthorInput {
  where: EdgeWhereUniqueInput!
  update: EdgeUpdateWithoutAuthorDataInput!
  create: EdgeCreateWithoutAuthorInput!
}

input EdgeUpsertWithWhereUniqueWithoutGraphInput {
  where: EdgeWhereUniqueInput!
  update: EdgeUpdateWithoutGraphDataInput!
  create: EdgeCreateWithoutGraphInput!
}

input EdgeUpsertWithWhereUniqueWithoutSourceInput {
  where: EdgeWhereUniqueInput!
  update: EdgeUpdateWithoutSourceDataInput!
  create: EdgeCreateWithoutSourceInput!
}

input EdgeWhereInput {
  """Logical AND on all given filters."""
  AND: [EdgeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EdgeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EdgeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  graph: GraphWhereInput
  source: SummitWhereInput
  target: SummitWhereInput
}

input EdgeWhereUniqueInput {
  id: ID
}

type Graph implements Node {
  id: ID!
  title: String!
  author: User!
  summits(where: SummitWhereInput, orderBy: SummitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Summit!]
  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type GraphConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GraphEdge]!
  aggregate: AggregateGraph!
}

input GraphCreateInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutGraphsInput!
  summits: SummitCreateManyWithoutGraphsInput
  edges: EdgeCreateManyWithoutGraphInput
}

input GraphCreateManyWithoutAuthorInput {
  create: [GraphCreateWithoutAuthorInput!]
  connect: [GraphWhereUniqueInput!]
}

input GraphCreateManyWithoutSummitsInput {
  create: [GraphCreateWithoutSummitsInput!]
  connect: [GraphWhereUniqueInput!]
}

input GraphCreateOneWithoutEdgesInput {
  create: GraphCreateWithoutEdgesInput
  connect: GraphWhereUniqueInput
}

input GraphCreateWithoutAuthorInput {
  id: ID
  title: String!
  summits: SummitCreateManyWithoutGraphsInput
  edges: EdgeCreateManyWithoutGraphInput
}

input GraphCreateWithoutEdgesInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutGraphsInput!
  summits: SummitCreateManyWithoutGraphsInput
}

input GraphCreateWithoutSummitsInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutGraphsInput!
  edges: EdgeCreateManyWithoutGraphInput
}

"""An edge in a connection."""
type GraphEdge {
  """The item at the end of the edge."""
  node: Graph!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GraphOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GraphPreviousValues {
  id: ID!
  title: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GraphScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type GraphSubscriptionPayload {
  mutation: MutationType!
  node: Graph
  updatedFields: [String!]
  previousValues: GraphPreviousValues
}

input GraphSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GraphWhereInput
}

input GraphUpdateInput {
  title: String
  author: UserUpdateOneRequiredWithoutGraphsInput
  summits: SummitUpdateManyWithoutGraphsInput
  edges: EdgeUpdateManyWithoutGraphInput
}

input GraphUpdateManyDataInput {
  title: String
}

input GraphUpdateManyMutationInput {
  title: String
}

input GraphUpdateManyWithoutAuthorInput {
  create: [GraphCreateWithoutAuthorInput!]
  connect: [GraphWhereUniqueInput!]
  set: [GraphWhereUniqueInput!]
  disconnect: [GraphWhereUniqueInput!]
  delete: [GraphWhereUniqueInput!]
  update: [GraphUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [GraphUpdateManyWithWhereNestedInput!]
  deleteMany: [GraphScalarWhereInput!]
  upsert: [GraphUpsertWithWhereUniqueWithoutAuthorInput!]
}

input GraphUpdateManyWithoutSummitsInput {
  create: [GraphCreateWithoutSummitsInput!]
  connect: [GraphWhereUniqueInput!]
  set: [GraphWhereUniqueInput!]
  disconnect: [GraphWhereUniqueInput!]
  delete: [GraphWhereUniqueInput!]
  update: [GraphUpdateWithWhereUniqueWithoutSummitsInput!]
  updateMany: [GraphUpdateManyWithWhereNestedInput!]
  deleteMany: [GraphScalarWhereInput!]
  upsert: [GraphUpsertWithWhereUniqueWithoutSummitsInput!]
}

input GraphUpdateManyWithWhereNestedInput {
  where: GraphScalarWhereInput!
  data: GraphUpdateManyDataInput!
}

input GraphUpdateOneRequiredWithoutEdgesInput {
  create: GraphCreateWithoutEdgesInput
  connect: GraphWhereUniqueInput
  update: GraphUpdateWithoutEdgesDataInput
  upsert: GraphUpsertWithoutEdgesInput
}

input GraphUpdateWithoutAuthorDataInput {
  title: String
  summits: SummitUpdateManyWithoutGraphsInput
  edges: EdgeUpdateManyWithoutGraphInput
}

input GraphUpdateWithoutEdgesDataInput {
  title: String
  author: UserUpdateOneRequiredWithoutGraphsInput
  summits: SummitUpdateManyWithoutGraphsInput
}

input GraphUpdateWithoutSummitsDataInput {
  title: String
  author: UserUpdateOneRequiredWithoutGraphsInput
  edges: EdgeUpdateManyWithoutGraphInput
}

input GraphUpdateWithWhereUniqueWithoutAuthorInput {
  where: GraphWhereUniqueInput!
  data: GraphUpdateWithoutAuthorDataInput!
}

input GraphUpdateWithWhereUniqueWithoutSummitsInput {
  where: GraphWhereUniqueInput!
  data: GraphUpdateWithoutSummitsDataInput!
}

input GraphUpsertWithoutEdgesInput {
  update: GraphUpdateWithoutEdgesDataInput!
  create: GraphCreateWithoutEdgesInput!
}

input GraphUpsertWithWhereUniqueWithoutAuthorInput {
  where: GraphWhereUniqueInput!
  update: GraphUpdateWithoutAuthorDataInput!
  create: GraphCreateWithoutAuthorInput!
}

input GraphUpsertWithWhereUniqueWithoutSummitsInput {
  where: GraphWhereUniqueInput!
  update: GraphUpdateWithoutSummitsDataInput!
  create: GraphCreateWithoutSummitsInput!
}

input GraphWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  summits_every: SummitWhereInput
  summits_some: SummitWhereInput
  summits_none: SummitWhereInput
  edges_every: EdgeWhereInput
  edges_some: EdgeWhereInput
  edges_none: EdgeWhereInput
}

input GraphWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGraph(data: GraphCreateInput!): Graph!
  createEdge(data: EdgeCreateInput!): Edge!
  createSummit(data: SummitCreateInput!): Summit!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGraph(data: GraphUpdateInput!, where: GraphWhereUniqueInput!): Graph
  updateEdge(data: EdgeUpdateInput!, where: EdgeWhereUniqueInput!): Edge
  updateSummit(data: SummitUpdateInput!, where: SummitWhereUniqueInput!): Summit
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGraph(where: GraphWhereUniqueInput!): Graph
  deleteEdge(where: EdgeWhereUniqueInput!): Edge
  deleteSummit(where: SummitWhereUniqueInput!): Summit
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGraph(where: GraphWhereUniqueInput!, create: GraphCreateInput!, update: GraphUpdateInput!): Graph!
  upsertEdge(where: EdgeWhereUniqueInput!, create: EdgeCreateInput!, update: EdgeUpdateInput!): Edge!
  upsertSummit(where: SummitWhereUniqueInput!, create: SummitCreateInput!, update: SummitUpdateInput!): Summit!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyGraphs(data: GraphUpdateManyMutationInput!, where: GraphWhereInput): BatchPayload!
  updateManyEdges(data: EdgeUpdateManyMutationInput!, where: EdgeWhereInput): BatchPayload!
  updateManySummits(data: SummitUpdateManyMutationInput!, where: SummitWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyGraphs(where: GraphWhereInput): BatchPayload!
  deleteManyEdges(where: EdgeWhereInput): BatchPayload!
  deleteManySummits(where: SummitWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph]!
  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge]!
  summits(where: SummitWhereInput, orderBy: SummitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Summit]!
  user(where: UserWhereUniqueInput!): User
  graph(where: GraphWhereUniqueInput!): Graph
  edge(where: EdgeWhereUniqueInput!): Edge
  summit(where: SummitWhereUniqueInput!): Summit
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  graphsConnection(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphConnection!
  edgesConnection(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EdgeConnection!
  summitsConnection(where: SummitWhereInput, orderBy: SummitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SummitConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  graph(where: GraphSubscriptionWhereInput): GraphSubscriptionPayload
  edge(where: EdgeSubscriptionWhereInput): EdgeSubscriptionPayload
  summit(where: SummitSubscriptionWhereInput): SummitSubscriptionPayload
}

type Summit implements Node {
  id: ID!
  author: User!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph!]
  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]
  title: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SummitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SummitEdge]!
  aggregate: AggregateSummit!
}

input SummitCreateInput {
  id: ID
  title: String!
  body: String!
  author: UserCreateOneWithoutSummitsInput!
  graphs: GraphCreateManyWithoutSummitsInput
  edges: EdgeCreateManyWithoutSourceInput
}

input SummitCreateManyWithoutAuthorInput {
  create: [SummitCreateWithoutAuthorInput!]
  connect: [SummitWhereUniqueInput!]
}

input SummitCreateManyWithoutGraphsInput {
  create: [SummitCreateWithoutGraphsInput!]
  connect: [SummitWhereUniqueInput!]
}

input SummitCreateOneInput {
  create: SummitCreateInput
  connect: SummitWhereUniqueInput
}

input SummitCreateOneWithoutEdgesInput {
  create: SummitCreateWithoutEdgesInput
  connect: SummitWhereUniqueInput
}

input SummitCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  graphs: GraphCreateManyWithoutSummitsInput
  edges: EdgeCreateManyWithoutSourceInput
}

input SummitCreateWithoutEdgesInput {
  id: ID
  title: String!
  body: String!
  author: UserCreateOneWithoutSummitsInput!
  graphs: GraphCreateManyWithoutSummitsInput
}

input SummitCreateWithoutGraphsInput {
  id: ID
  title: String!
  body: String!
  author: UserCreateOneWithoutSummitsInput!
  edges: EdgeCreateManyWithoutSourceInput
}

"""An edge in a connection."""
type SummitEdge {
  """The item at the end of the edge."""
  node: Summit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SummitOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SummitPreviousValues {
  id: ID!
  title: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SummitScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SummitScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SummitScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SummitScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SummitSubscriptionPayload {
  mutation: MutationType!
  node: Summit
  updatedFields: [String!]
  previousValues: SummitPreviousValues
}

input SummitSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SummitSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SummitSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SummitSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SummitWhereInput
}

input SummitUpdateDataInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutSummitsInput
  graphs: GraphUpdateManyWithoutSummitsInput
  edges: EdgeUpdateManyWithoutSourceInput
}

input SummitUpdateInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutSummitsInput
  graphs: GraphUpdateManyWithoutSummitsInput
  edges: EdgeUpdateManyWithoutSourceInput
}

input SummitUpdateManyDataInput {
  title: String
  body: String
}

input SummitUpdateManyMutationInput {
  title: String
  body: String
}

input SummitUpdateManyWithoutAuthorInput {
  create: [SummitCreateWithoutAuthorInput!]
  connect: [SummitWhereUniqueInput!]
  set: [SummitWhereUniqueInput!]
  disconnect: [SummitWhereUniqueInput!]
  delete: [SummitWhereUniqueInput!]
  update: [SummitUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [SummitUpdateManyWithWhereNestedInput!]
  deleteMany: [SummitScalarWhereInput!]
  upsert: [SummitUpsertWithWhereUniqueWithoutAuthorInput!]
}

input SummitUpdateManyWithoutGraphsInput {
  create: [SummitCreateWithoutGraphsInput!]
  connect: [SummitWhereUniqueInput!]
  set: [SummitWhereUniqueInput!]
  disconnect: [SummitWhereUniqueInput!]
  delete: [SummitWhereUniqueInput!]
  update: [SummitUpdateWithWhereUniqueWithoutGraphsInput!]
  updateMany: [SummitUpdateManyWithWhereNestedInput!]
  deleteMany: [SummitScalarWhereInput!]
  upsert: [SummitUpsertWithWhereUniqueWithoutGraphsInput!]
}

input SummitUpdateManyWithWhereNestedInput {
  where: SummitScalarWhereInput!
  data: SummitUpdateManyDataInput!
}

input SummitUpdateOneRequiredInput {
  create: SummitCreateInput
  connect: SummitWhereUniqueInput
  update: SummitUpdateDataInput
  upsert: SummitUpsertNestedInput
}

input SummitUpdateOneRequiredWithoutEdgesInput {
  create: SummitCreateWithoutEdgesInput
  connect: SummitWhereUniqueInput
  update: SummitUpdateWithoutEdgesDataInput
  upsert: SummitUpsertWithoutEdgesInput
}

input SummitUpdateWithoutAuthorDataInput {
  title: String
  body: String
  graphs: GraphUpdateManyWithoutSummitsInput
  edges: EdgeUpdateManyWithoutSourceInput
}

input SummitUpdateWithoutEdgesDataInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutSummitsInput
  graphs: GraphUpdateManyWithoutSummitsInput
}

input SummitUpdateWithoutGraphsDataInput {
  title: String
  body: String
  author: UserUpdateOneRequiredWithoutSummitsInput
  edges: EdgeUpdateManyWithoutSourceInput
}

input SummitUpdateWithWhereUniqueWithoutAuthorInput {
  where: SummitWhereUniqueInput!
  data: SummitUpdateWithoutAuthorDataInput!
}

input SummitUpdateWithWhereUniqueWithoutGraphsInput {
  where: SummitWhereUniqueInput!
  data: SummitUpdateWithoutGraphsDataInput!
}

input SummitUpsertNestedInput {
  update: SummitUpdateDataInput!
  create: SummitCreateInput!
}

input SummitUpsertWithoutEdgesInput {
  update: SummitUpdateWithoutEdgesDataInput!
  create: SummitCreateWithoutEdgesInput!
}

input SummitUpsertWithWhereUniqueWithoutAuthorInput {
  where: SummitWhereUniqueInput!
  update: SummitUpdateWithoutAuthorDataInput!
  create: SummitCreateWithoutAuthorInput!
}

input SummitUpsertWithWhereUniqueWithoutGraphsInput {
  where: SummitWhereUniqueInput!
  update: SummitUpdateWithoutGraphsDataInput!
  create: SummitCreateWithoutGraphsInput!
}

input SummitWhereInput {
  """Logical AND on all given filters."""
  AND: [SummitWhereInput!]

  """Logical OR on all given filters."""
  OR: [SummitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SummitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  graphs_every: GraphWhereInput
  graphs_some: GraphWhereInput
  graphs_none: GraphWhereInput
  edges_every: EdgeWhereInput
  edges_some: EdgeWhereInput
  edges_none: EdgeWhereInput
}

input SummitWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph!]
  summits(where: SummitWhereInput, orderBy: SummitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Summit!]
  edges(where: EdgeWhereInput, orderBy: EdgeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Edge!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  graphs: GraphCreateManyWithoutAuthorInput
  summits: SummitCreateManyWithoutAuthorInput
  edges: EdgeCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutEdgesInput {
  create: UserCreateWithoutEdgesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGraphsInput {
  create: UserCreateWithoutGraphsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSummitsInput {
  create: UserCreateWithoutSummitsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEdgesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  graphs: GraphCreateManyWithoutAuthorInput
  summits: SummitCreateManyWithoutAuthorInput
}

input UserCreateWithoutGraphsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  summits: SummitCreateManyWithoutAuthorInput
  edges: EdgeCreateManyWithoutAuthorInput
}

input UserCreateWithoutSummitsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  graphs: GraphCreateManyWithoutAuthorInput
  edges: EdgeCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  graphs: GraphUpdateManyWithoutAuthorInput
  summits: SummitUpdateManyWithoutAuthorInput
  edges: EdgeUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutEdgesInput {
  create: UserCreateWithoutEdgesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEdgesDataInput
  upsert: UserUpsertWithoutEdgesInput
}

input UserUpdateOneRequiredWithoutGraphsInput {
  create: UserCreateWithoutGraphsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutGraphsDataInput
  upsert: UserUpsertWithoutGraphsInput
}

input UserUpdateOneRequiredWithoutSummitsInput {
  create: UserCreateWithoutSummitsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSummitsDataInput
  upsert: UserUpsertWithoutSummitsInput
}

input UserUpdateWithoutEdgesDataInput {
  name: String
  email: String
  password: String
  graphs: GraphUpdateManyWithoutAuthorInput
  summits: SummitUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGraphsDataInput {
  name: String
  email: String
  password: String
  summits: SummitUpdateManyWithoutAuthorInput
  edges: EdgeUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutSummitsDataInput {
  name: String
  email: String
  password: String
  graphs: GraphUpdateManyWithoutAuthorInput
  edges: EdgeUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutEdgesInput {
  update: UserUpdateWithoutEdgesDataInput!
  create: UserCreateWithoutEdgesInput!
}

input UserUpsertWithoutGraphsInput {
  update: UserUpdateWithoutGraphsDataInput!
  create: UserCreateWithoutGraphsInput!
}

input UserUpsertWithoutSummitsInput {
  update: UserUpdateWithoutSummitsDataInput!
  create: UserCreateWithoutSummitsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  graphs_every: GraphWhereInput
  graphs_some: GraphWhereInput
  graphs_none: GraphWhereInput
  summits_every: SummitWhereInput
  summits_some: SummitWhereInput
  summits_none: SummitWhereInput
  edges_every: EdgeWhereInput
  edges_some: EdgeWhereInput
  edges_none: EdgeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
